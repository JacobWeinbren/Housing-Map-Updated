---
const COLOR_SCALE = ["#2b83ba", "#abdda4", "#ffffbf", "#fdae61", "#d7191c"];

const years = Array.from({ length: 28 }, (_, i) => 1995 + i);

const optionsHtml = years
	.map((year) => `<option value="${year}">House Prices ${year}</option>`)
	.join("");
---

<div id="map" class="w-screen h-screen"></div>
<div id="geocoder" class="geocoder fixed top-4 left-4 z-10"></div>

<div
	class="sm:w-[500px] text-sm w-full flex flex-col gap-2 absolute bottom-10 rounded-md z-10 bg-white p-4 left-1/2 transform -translate-x-1/2"
>
	<div>
		<p class="text-md font-semibold" id="title">
			House Prices as a Multiple of Median Salary
		</p>
		<p class="mb-2">England and Wales</p>
	</div>

	<div>
		<div
			class="w-full h-4 rounded"
			style={`background: linear-gradient(to right, ${COLOR_SCALE.join(", ")});`}
		>
		</div>
		<div class="flex justify-between">
			<span id="min">0x</span>
			<span id="max">20x</span>
		</div>
	</div>

	<label for="year-selector" class="sr-only">Select Year</label>
	<select id="year-selector" class="p-1 rounded border">
		<Fragment set:html={optionsHtml} />
	</select>

	<div id="meta">
		The median house in <span id="year" class="font-semibold"></span>
		cost <span id="times" class="font-semibold"></span> the median salary. The
		median salary was <span id="salary" class="font-semibold"></span>.
	</div>
	<div id="hover">Hover over a point to see its value.</div>

	<button
		id="pricesMapButton"
		class="border p-1 rounded hover:bg-gray-100 active:bg-gray-300"
	>
		Prices Map
	</button>
	<button
		id="changeMapButton"
		class="border p-1 rounded hover:bg-gray-100 active:bg-gray-300"
	>
		Price Change Map
	</button>
</div>

<script>
	import chroma from "chroma-js";
	import mapboxgl from "mapbox-gl";
	import MapboxGeocoder from "@mapbox/mapbox-gl-geocoder";
	const MAPBOX_TOKEN = import.meta.env.PUBLIC_MAPBOX_TOKEN;

	const medianPriceData = {
		"1995": 3.63,
		"1996": 3.63,
		"1997": 3.58,
		"1998": 3.71,
		"1999": 4.04,
		"2000": 4.26,
		"2001": 4.57,
		"2002": 5.38,
		"2003": 6.15,
		"2004": 6.84,
		"2005": 6.99,
		"2006": 7.15,
		"2007": 7.3,
		"2008": 6.8,
		"2009": 6.59,
		"2010": 6.97,
		"2011": 6.71,
		"2012": 6.79,
		"2013": 6.85,
		"2014": 7.0,
		"2015": 7.43,
		"2016": 7.63,
		"2017": 7.81,
		"2018": 7.73,
		"2019": 7.59,
		"2020": 8.17,
		"2021": 8.44,
		"2022": 8.53,
	};

	let medianSalaryData = {
		"1995": 15147.4,
		"1996": 15711.0,
		"1997": 16775.4,
		"1998": 17521.6,
		"1999": 18069.4,
		"2000": 18784.3,
		"2001": 19692.2,
		"2002": 20464.4,
		"2003": 21142.8,
		"2004": 21930.7,
		"2005": 22525.5,
		"2006": 23209.0,
		"2007": 23965.6,
		"2008": 24998.8,
		"2009": 25562.3,
		"2010": 26104.9,
		"2011": 26225.0,
		"2012": 26501.5,
		"2013": 27007.6,
		"2014": 27153.7,
		"2015": 27576.4,
		"2016": 28181.6,
		"2017": 28802.6,
		"2018": 29752.2,
		"2019": 30628.8,
		"2020": 30618.4,
		"2021": 31975.0,
		"2022": 32522.9,
	};

	const COLOR_SCALE = ["#2b83ba", "#abdda4", "#ffffbf", "#fdae61", "#d7191c"];

	function getColorExpression(mapMode) {
		const steps =
			mapMode === "prices" ? [5, 10, 15, 20] : [0, 75, 150, 225, 300];

		return [
			"case",
			["boolean", ["feature-state", "hover"], false],
			"rgba(0, 0, 0, 0.5)",
			[
				"step",
				mapMode === "prices"
					? ["get", "price"]
					: [
							"-",
							[
								"*",
								100,
								[
									"/",
									["get", "year_2022"],
									["get", "year_1995"],
								],
							],
							100,
						],
				COLOR_SCALE[0],
				steps[0],
				COLOR_SCALE[1],
				steps[1],
				COLOR_SCALE[2],
				steps[2],
				COLOR_SCALE[3],
				steps[3],
				COLOR_SCALE[4],
			],
		];
	}

	let currentYear = 1995;
	let mapMode = "prices";

	const map = new mapboxgl.Map({
		container: "map",
		center: [-0.2, 51.5],
		zoom: 9,
		minZoom: 9,
		maxZoom: 17,
		style: "mapbox://styles/mapbox/light-v11?optimize=true",
		accessToken: MAPBOX_TOKEN,
		antialias: true,
		projection: { name: "mercator" },
	});

	map.on("load", () => {
		updateLayerData(currentYear);

		const geocoder = new MapboxGeocoder({
			accessToken: MAPBOX_TOKEN,
			mapboxgl: mapboxgl,
		});
		document.getElementById("geocoder").appendChild(geocoder.onAdd(map));

		map.addControl(new mapboxgl.NavigationControl());

		document
			.getElementById("year-selector")
			.addEventListener("change", (event) => {
				const selectedYear = parseInt(
					(event.target as HTMLSelectElement).value,
					10
				);
				if (!isNaN(selectedYear) && selectedYear !== currentYear) {
					currentYear = selectedYear;
					updateLayerData(currentYear);
					updateMedianDisplay(currentYear);
				}
			});

		document
			.getElementById("pricesMapButton")
			.addEventListener("click", () => {
				mapMode = "prices";
				updateLayerData(currentYear);
				updateMapDisplay();
			});

		document
			.getElementById("changeMapButton")
			.addEventListener("click", () => {
				mapMode = "changes";
				updateLayerData(currentYear);
				updateMapDisplay();
			});
	});

	function updateLayerData(year) {
		const source = `housing-${mapMode}-${year}`;
		const layerId = `housing-layer-${mapMode}-${year}`;

		if (map.getStyle().layers) {
			map.getStyle().layers.forEach((layer) => {
				if (layer.id.startsWith("housing-layer-")) {
					map.removeLayer(layer.id);
				}
			});
		}

		if (map.getStyle().sources) {
			Object.keys(map.getStyle().sources).forEach((sourceId) => {
				if (sourceId.startsWith("housing-")) {
					map.removeSource(sourceId);
				}
			});
		}

		const url =
			mapMode === "prices"
				? `https://map.jacobweinbren.workers.dev/housing-${year}/{z}/{x}/{y}.mvt`
				: "https://map.jacobweinbren.workers.dev/housing-change/{z}/{x}/{y}.mvt";

		map.addSource(source, {
			type: "vector",
			tiles: [url],
			minzoom: 9,
			maxzoom: 17,
		});

		const sourceLayer = mapMode === "prices" ? `${year}` : "housing_map";

		console.log(getColorExpression(mapMode));

		const firstLabelLayerId = map
			.getStyle()
			.layers.find((layer) => layer.type === "symbol").id;

		map.addLayer(
			{
				id: layerId,
				type: mapMode === "prices" ? "circle" : "fill",
				source,
				"source-layer": sourceLayer,
				layout: {
					visibility: "visible",
				},
				paint: {
					[mapMode === "prices" ? "circle-color" : "fill-color"]:
						getColorExpression(mapMode),
					[mapMode === "prices" ? "circle-opacity" : "fill-opacity"]:
						mapMode === "prices" ? 1 : 0.5,
					...(mapMode === "prices" && {
						"circle-radius": [
							"interpolate",
							["linear"],
							["zoom"],
							12,
							1,
							22,
							20,
						],
					}),
				},
			},
			firstLabelLayerId
		);

		map.on("mousemove", layerId, (e) => {
			if (e.features.length > 0) {
				const feature = e.features[0];
				let hoverText = "";

				if (mapMode === "prices") {
					const price = feature.properties.price.toFixed(1);
					hoverText = `This house cost <span class="font-semibold">${price} times</span> the median salary.`;
				} else {
					const change = (
						(feature.properties.year_2022 /
							feature.properties.year_1995 -
							1) *
						100
					).toFixed(0);
					hoverText = `This area's houses are worth <span class="font-semibold">${change}%</span> more in 2022 than 1995, relative to the median salary.`;
				}

				document.getElementById("hover").innerHTML = hoverText;
			}
		});

		map.on("mouseleave", layerId, () => {
			document.getElementById("hover").textContent =
				"Hover over a point to see its value.";
		});
	}

	function updateMedianDisplay(year) {
		const medianValue = medianPriceData[year].toFixed(1);
		const medianSalary = medianSalaryData[year];
		const formattedSalary = new Intl.NumberFormat("en-GB", {
			style: "currency",
			currency: "GBP",
			maximumSignificantDigits: 3,
		}).format(medianSalary);

		document.getElementById("year").textContent = `${year}`;
		document.getElementById("times").textContent = `${medianValue} times`;
		document.getElementById("salary").textContent = formattedSalary;
	}

	function updateMapDisplay() {
		document.getElementById("title").textContent =
			mapMode === "prices"
				? "House Prices as a Multiple of Median Salary"
				: "Percentage Change in House Prices, Relative to Median Salary";
		document.getElementById("min").textContent =
			mapMode === "prices" ? "0x" : "0%";
		document.getElementById("max").textContent =
			mapMode === "prices" ? "20x" : "300%";
		document.getElementById("year-selector").style.display =
			mapMode === "prices" ? "block" : "none";
		document.getElementById("meta").style.display =
			mapMode === "prices" ? "block" : "none";
		document.getElementById("hover").textContent =
			"Hover over a point to see its value.";
	}
</script>
